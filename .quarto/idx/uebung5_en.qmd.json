{"title":"Assessing water level and discharge","markdown":{"yaml":{"title":"Assessing water level and discharge","subtitle":"Hydrologie und Wasserbau - Tutorial 5","author":"Tom Shatwell","date":"26 Nov 2024","format":"html","editor":"visual"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\nIn this tutorial, you will evaluate stage and discharge data from three hydrological stations on streams located in Bavaria. The tasks you will perform include:\n\n-   importing and visualising the data\n-   examining the stage-discharge relationship\n-   checking the homogeneity of the data\n-   plotting some key curves that characterise the data\n-   Estimating discharge at an intermediate location for a construction project\n\nThe exercises can all be completed by adapting the code that is shown in the examples, or by interpreting the plots.\n\nThe aim is to familiarise you with some statistical methods commonly used in hydrology, train you in using R, and give you an impression of working with real hydrological data.\n\n## The dataset\n\nThe dataset comes from two streams located in Bavaria about 30 km north of the city Bayreuth. The data were downloaded from the [geoportal of the Gewaesserkundlicher Dienst, Bayern](https://www.gkd.bayern.de/) from the [Bayrisches Landesamt fuer Umwelt](https://www.lfu.bayern.de/index.htm) (Bavarian Environmental Agency) under the [CC-BY 4.0 license](https://creativecommons.org/licenses/by/4.0/deed.en), which regulates the further use of the data. The Bayrisches Landesamt fuer Umwelt are gratefully acknowledged for the collecting and supplying the data.\n\nThe data are in the file `schorgast_wasserstand_abfluss.csv` in the course folder. The data consists of daily measurements of stage (W) in cm above the local datum and discharge (Q) in $\\mathrm{m^3 s^{-1}}$ from three hydrological stations:\n\n-   on the Schorgast stream at Wirsberg (station 1)\n-   on the Untere Steinach stream at Untersteinach (Station 2)\n-   on the Schorgast stream at Untersteinach downstream of the confluence of the Untere Steinach stream (Station 3).\n\n![Stream network and location of hydrological stations](figs/schorgast-untersteinach2.png){.center width=\"50%\"}\n\nThe headings W1-W3 and Q1-Q3 refer to the stage and discharge in stations 1-3 respectively. The original data have been modified slightly by trimming them to the same period, and missing discharge measurements (Jan - Oct 1982) at station 2 were estimated based on the data at the other two stations.\n\nThe data are available in this form at <https://> or on the course folder. Additional information about the data are contained the file `readme-steinach-schorgast.txt` in the course folder.\n\n## Packages\n\nFirst load the necessary packages for your new R-session.\n\n```{r, packages, eval=TRUE, include=FALSE}\nlibrary(readr)     # modernized functions to read rectangular data like csv\nlibrary(dplyr)     # the most essential tidyverse packages\nlibrary(tidyr)     # contains for example pivot tables\nlibrary(lubridate) # a tidyverse package for dates\nlibrary(ggplot2)   # high level plotting with the grammar of graphics\n```\n\n```{r, packages, eval=TRUE}\n```\n\n# Importing and visualising the data\n\nBefore importing data into R, it is helpful to check your current working directory with `getwd()`, and then open the file in a text editor to check the structure of the data. For instance, which columns are there, how are they formatted (e.g. dates, decimal numbers, characters), how are columns separated, are there any additional lines above the data, do the headings contain special characters that will cause problems in R? It may be easier to fix these manually before importing the file.\n\n![Content of the first few rows of the datafile \"schorgast_wasserstand_abfluss.csv\"](figs/schorgast-csv-header.PNG){.left width=\"40%\"}\n\nIn this case we have a file with one header line, the first column contains a date in format YYYY-MM-DD, and the columns are separated by commas. On my computer, the file is located up one level `../` from my working directory, and from there in the subdirectory `Daten/`. We use `read_csv()` from the `readr` package and assign (`<-`) the data the name `schorgast`.\n\n```{r, import-schorgast, eval=FALSE}\nschorgast <- read_csv(\"data/schorgast_wasserstand_abfluss.csv\")\n```\n\n```{r, import-schorgast, eval=TRUE, include=FALSE, echo=FALSE}\n```\n\nAlternatively, you can import the data using the file menu -\\> Import dataset -\\> from text (readr)\n\n![Import data manually through the menu](figs/import-screenshot.png)\n\nNext, let's inspect the data to check the column names and data types and subsequently plot the data.\n\n```{r, head-schorgast, eval=TRUE, echo=TRUE}\nhead(schorgast)\nclass(schorgast$Datum)\n```\n\n```{r, plot-discharge, eval=TRUE}\nplot(Q1 ~ Datum, data = schorgast, type = \"l\")\n```\n\nIf the `Datum` column is not a `Date` class, then you will have trouble plotting the data.\n\n## Exercise 1\n\n-   Plot the stage (W) and discharge (Q) data for stations 1 to 3.\n-   Are there any missing data?\n\n# Checking homogeneity of the data\n\nMany statistical tests and analyses of hydrological data assume that the data are homogeneous. Data are homogeneous when they are consistent and stationary and when there are no gradual or sudden changes. Such changes could be caused by landuse change in the catchment, a change in the measurement method. One fast and easy way to check this is to perform a **double-sum test**, which requires additional hydrological time from a nearby catchment. This test will not expose inhomogeneity that affects both catchments, such as climate change.\n\nThe double sum test involves adding up the daily discharge measurements at two stations for the same period, and plotting the sums against each other. If the plot produces a straight line, the data look homogeneous. A kink in the curve would suggest a sudden change in the dataset, a change in slope would indicate a gradual or systematic change. The R function `cumsum()` calculates the cumulative sum of the measurements (i.e. q1, q1+q2, q1+q2+q3, ...).\n\n```{r, eg-doublesum, eval=TRUE, echo=TRUE}\nx <- 1:10\nx\ncumsum(x)\n```\n\nWe plot the double-sum for stations 1 and 2, using the columns Q1 and Q2. Add some axis labels with `xlab` and `ylab`. Then we run a simple linear regression using the function `lm()` so we can plot a line through the data. We add the line to the plot with the function `abline()`, changing the colour to red (`col = \"red\"`) and line width to double the default (`lwd = 2`).\n\n```{r, plot-cumsums, eval=TRUE}\nsum1 <- cumsum(schorgast$Q1)\nsum2 <- cumsum(schorgast$Q2)\n\nplot(sum2 ~ sum1, xlab=\"Station 1\", ylab=\"Station 2\")\n\nreg1 <- lm(sum2 ~ sum1)\nabline(reg1, col = \"red\", lwd = 2)\n```\n\nThe line initially looks pretty straight because the black points follow the red line very closely. But what if we restrict the regression just to the first part of the series, say the first quarter, which is about 4500 observations?\n\n```{r, plot-cumsums2, eval=TRUE}\nplot(sum2 ~ sum1, xlab=\"Station 1\", ylab=\"Station 2\")\n\nreg2 <- lm(sum2[1:4500] ~ sum1[1:4500])\nabline(reg2, col = \"red\", lwd = 2)\n```\n\nThe line is perhaps not as straight as it initially looked.\n\n## Exercise 2\n\n-   What does the deviation from the line in the plot above mean?\n-   What could have happened in the catchments of stations 1 and 2 that could explain this deviation?\n-   Use double-sum plots to compare the other station, i.e. station 1 and 3, and station 2 and 3. Explain your findings.\n\n# Stage-discharge relationships\n\nHydrological stations don't measure discharge directly, they measure the water level (stage). Stage-discharge relationships are used to calculate the discharge from the water level. Stage-discharge relationships are developed by measuring the discharge at different water levels, and then fitting a curve to the measurements. The stage-discharge relationship depends on the cross-section of the stream bed. If the cross-section changes, then the stage-discharge relationship no longer applies, and it must be recalculated.\n\n## Exercise 3\n\n-   Plot the stage-discharge relationships for the three stations. Typically the stage is plotted on the (vertical) y-axis and the discharge on the x-axis. They should look like this:\n\n```{r, plot-W-Q, eval=TRUE, echo=FALSE}\nplot(W2~Q2, schorgast, main=\"Station 2\",\n     xlab = expression(Abfluss~(m^3~s^-1)),\n     ylab = \"Wasserstand (cm)\")\n```\n\nLooking at the stage-discharge curves, there can be quite some noise. A fixed stage-discharge curve would look like a sharp line, so perhaps different stage-discharge curves were used over the years. The function `ggplot()` in the `ggplot2` package has some functionality that can be helpful to examine this. For instance, it is possible to colour-code the points by time by setting the argument `colour = Datum`. This tells ggplot to colour the points according to the values in the `Datum` column.\n\n```{r, ggplot-W-Q, eval=TRUE, echo=TRUE}\nggplot(data = schorgast) +\n  geom_point(aes(x = Q1, y = W1, colour = Datum)) + \n  theme_light()\n```\n\n-   Create a plot like the one above for station 3. What can you say about how the shape of the stage-discharge curve may have changed over time?\n\n-   How did the channel cross-section change over time to cause this effect?\n\n-   What hydrological processes could have caused these changes?\n\n# Duration curves\n\nDuration curves show (when created from daily flow data) show how often a certain water level or discharge is exceeded within a certain period. For instance, on how many days per year is a flow rate of 1.5 $\\mathrm{m^3 s^{-1}}$ exceeded? They show the exceedance probability of a measured value.\n\nWe do this by sorting the values we are interested in from highest to lowest, and then plotting these values for the period we are interested in.\n\nWe will consider the water level at station 3 (`W3`). First, the function `order()` sorts the data from lowest to highest and returns the corresponding indices, which we call `ind`. Then the function `rev()` reverses this order, which we call `revind`. Finally, we create a new data.frame that is sorted with these indices.\n\n```{r, sort-W2, eval=TRUE}\nind <- order(schorgast$W3)\nrevind <- rev(ind)\nW3_sortiert <- schorgast[revind, ]\n\n# in R, it is also possible to combine these steps\nW3_sortiert <- schorgast[rev(order(schorgast$W3)), ]\n\nhead(W3_sortiert)\n```\n\nNow we are able to plot a duration curve. We will add a column for the probability, called `wahrscheinlichkeit`, which we will calculate from the number of observations (`nzeilen`). Normally you use the dollar sign `$` to access columns in a data.frame (e.g. `schorgast$Datum`). However, you can also use `$` to create columns. R checks whether the column exists, and if it doesn't, R will create it. Since the column `wahrscheinlichkeit` does not already exist, we can create it with `schorgast$wahrscheinlichkeit <- ...`.\n\n```{r, plot-dauerlinie, eval=TRUE}\nnzeilen <- nrow(W3_sortiert)\n\nW3_sortiert$wahrscheinlichkeit <- (1 : nzeilen) / nzeilen\n\nplot(W3~wahrscheinlichkeit, data = W3_sortiert, type = \"l\")\n```\n\nNow you can calculate the probability that a certain water level will be exceeded on one day. Try doing this manually by estimating the probability from the curve. You can use the function `abline()` to add lines to the plot as a guide. For instance `abline(h = 200)` will add a horizontal line at y=200, and `abline(v = c(0.2, 0.4, 0.6))` will add vertical lines at x = 0.2, x = 0.4 and x = 0.6.\n\n## Exercise 4\n\n-   Using the procedure described above, estimate the exceedance probability of a water level of 148 cm at station 3.\n\n-   Which water level at station 3 is exceeded on 10% of days (ie probability of 0.1)?\n\n# Cumulative curves\n\nThe cumulative curve represents the integrated hydrograph (volume) of the flows. It usually starts at zero and ends at a value that is referred to as the flow or water volume of the observed period T. Cumulative curves are important for managing water storage and reservoirs. The slope of the curve is equal to the discharge.\n\n$$\nV_t = \\int_0^t Q\\, dt\n$$\n\nor\n\n$$\nV_T = \\int_0^T Q\\, dt\n$$\n\nHere we will calculate the cumulative distribution for certain years. To make this easier, we will first add two new columns to our dataset to display the year of the measurement, and the day of the year. The `year()` and `yday()` functions from the `lubridate` package do this.\n\n```{r, add-year, eval=TRUE}\nschorgast$jahr <- year(schorgast$Datum)\nschorgast$jahrtag <- yday(schorgast$Datum)\n\nhead(schorgast)\n```\n\nSince we have daily data, $dt$ = 1 day. This means we can find $V_T$ by simply adding up the measurements using `cumsum()`.\n\n```{r, calc-cumsum-year, eval=TRUE}\nschorgast <- schorgast |>\n  group_by(jahr) |>\n  mutate(summeQ1 = cumsum(Q1))\n\nhead(schorgast)\n```\n\nHere we used the `dplyr` package. The `dplyr` package uses the \"pipe\" or `|>` to take the result from one function and pass it directly to the next function. Think of the pipe `|>` as the word \"then\". You can interpret the function like this: take the dataset `schorgast`, then use `group_by()` to create groups that are in the same `jahr`, then use `mutate()` to create a new column called `summeQ1`, which is the cumulative sum (`cumsum()`) of the column `Q1` in each group (`jahr`).\n\nNow we can plot the cumulative curve for any year that we want, here 2009:\n\n```{r, plot-cumsum-year, eval=TRUE}\nplot(summeQ1 ~ Datum, data = schorgast, subset = jahr==2009, type = \"l\")\n```\n\n## Exercise 5\n\n-   plot the cumulative curve for station 2 (Q2) for the year 2006. You will first have to calculate the cumulative sum as shown above for station 1 (Q1).\n\nThe function `ggplot()` offers some useful features for visualising several lines. Here we would like to view several years together for comparison. First, we will convert the column `jahr` to a factor for better plotting. Then we will create a subset of the data for the years 1990 - 2001 so the plots don't get too messy. Next we plot the subset of the data and set `colour = jahr` so that ggplot will plot each year as a separate line. `theme_minimal()` removes the default grey background and some other details.\n\n```{r, plot-all-cumsums, eval=TRUE}\n# change 'jahr' to a factor\nschorgast$jahr <- as.factor(schorgast$jahr)\n\n# create a subset of the data for years 1990 - 2001\nschorgast_sub <- subset(schorgast, jahr %in% 1990:2001)\n\n# plot the data, each year in a different colour\nggplot(data = schorgast_sub) + \n  geom_line(aes(x = jahrtag, y = summeQ1, colour = jahr)) +\n  theme_minimal()\n```\n\nAnother way to make nice plots is to create a separate panel for each year. We do this with the function `facet_wrap()`. We tell `facet_wrap()` to make a new panel for each year (`~ jahr`), and keep the scales constant for each panel (`scales = \"fixed\"`).\n\n```{r, plot-cumsums3, eval=TRUE}\n# plot the data again, this time each year in a panel\nggplot(data = schorgast_sub) + \n  geom_line(aes(x = jahrtag, y = summeQ1)) +\n  facet_wrap(~jahr, scales = \"fixed\") +\n  theme_minimal()\n```\n\n## Exercise 6\n\nLooking at the plots above:\n\n-   which was the wettest year?\n-   which was the driest year?\n-   which year had the wettest autumn? Remember that steep parts of the curve have the highest discharge.\n\n# Estimating discharge at ungauged locations\n\n## Using the catchment areas\n\nHydrological gauging stations rarely exist at the location you need for your construction project. In such cases it is necessary to estimate or adapt the discharge from a different location. For instance, you may have to estimate discharge at point B using the data from station 2, which is the closest station.\n\n![Stream network and location of hydrological stations](figs/schorgast-untersteinach2.png){.center width=\"50%\"}\n\n```{r, maketable2, eval=TRUE}\n#| echo: false\n#| tbl-cap: \"Eigenschaften der Pegelstationen\"\n\nlibrary(readr)\ntabdata <- read.csv(\"data/schorgast-pegelinfo-en.csv\")\nknitr::kable(tabdata)\n```\n\nTo do this, you can scale the measured discharge in proportion to the size of the catchment areas ($A_E$) at each location.\n\n$$\nQ_B = Q_2 \\frac{A_B}{A_2}\n$$\n\nwhere $Q_B$ and $Q_2$ are the discharge at point B and station 2, and $A_B$ and $A_2$ are the areas of the catchments at point B and station 2.\n\nUsing the data in the table above:\n\n```{r, calc-QB, eval=TRUE}\nschorgast$QB <- schorgast$Q2 * 112.1 / 137.4\n\n# plot the result\nplot(QB ~ Datum, schorgast, subset = jahr == 1989, \n     type = \"l\", col = \"red\", main = \"QB - 1989\")\n```\n\n## Exercise 7\n\n-   Using the catchment areas given in the table, estimate the discharge at point A using the measured discharge at station 1. Add this data to the data.frame `schorgast` as a new column called `QA`.\n\n-   You could also use any of the other stations. Which do you think is best?\n\n## Using a regression approach\n\nYou may already have some discharge data at the location you are interested in. In this case you can use the correlation between the discharge at your location of interest and measured discharge at another location with a proper gauging station.\n\nIn this example, we will estimate the discharge at station 3 (Q3) using the discharge at stations 1 (Q1) and 2 (Q2). In fact, we have measured data at station 3, so we would not need to do this in practice, but we will do it anyway to test how good our method is. It makes sense to use both station 1 and 2 because station 3 should be close to the sum of both discharges and this will give us a better estimate.\n\nIn R, it is easy to perform a simple linear regression with the function `lm(y ~ x, data = meinedaten)`. Here `y` is the dependent variable, ie the one we want to estimate, and `x` is the independent variable, ie the one that helps us make the prediction. `y` and `x` are the names of columns in `meinedaten`.\n\nA multiple regression with more than one independent variable, say `x1` and `x2` is very easy in R. It looks like this `lm(y ~ x1 + x2, data = meinedaten)`.\n\nWe can therefore estimate Q3 (dependent variable) from Q1 and Q2 (independent variables) like this:\n\n```{r, reg-Q3, eval=TRUE}\nreg <- lm(Q3 ~ Q1 + Q2, data = schorgast)\n```\n\nWe can view the results with `summary()`.\n\n```{r, summary-reg, eval=TRUE}\nsummary(reg)\n```\n\nThe summary table gives important information about the regression. The coefficients of the regression are in the \"Estimate\" column. The T-statistic is given in the \"t value\" column. It shows that all the coefficients are highly significant with very low p-values. The \"R-squared\" value shows that our regression explains more than 96% of the variance, which is very good.\n\nLet's plot the data for one year (say 1980) to see how good our estimate of Q3 is. We use the `predict()` function to calculate the output of the regression and add it as a column to the dataset `schorgast`.\n\n```{r, plot-reg, eval=TRUE}\nschorgast$Q3_predicted <- predict(reg)\n\n# plot the original data in black\nplot(Q3 ~ Datum, schorgast, subset = jahr == 1980, type = \"l\")\n\n# add the predicted values\nlines(Q3_predicted ~ Datum, schorgast, col = \"red\")\n\n# add a legend\nlegend(\"topright\", c(\"measured\", \"predicted\"), lty=1, col = c(\"black\", \"red\"))\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# Introduction\n\nIn this tutorial, you will evaluate stage and discharge data from three hydrological stations on streams located in Bavaria. The tasks you will perform include:\n\n-   importing and visualising the data\n-   examining the stage-discharge relationship\n-   checking the homogeneity of the data\n-   plotting some key curves that characterise the data\n-   Estimating discharge at an intermediate location for a construction project\n\nThe exercises can all be completed by adapting the code that is shown in the examples, or by interpreting the plots.\n\nThe aim is to familiarise you with some statistical methods commonly used in hydrology, train you in using R, and give you an impression of working with real hydrological data.\n\n## The dataset\n\nThe dataset comes from two streams located in Bavaria about 30 km north of the city Bayreuth. The data were downloaded from the [geoportal of the Gewaesserkundlicher Dienst, Bayern](https://www.gkd.bayern.de/) from the [Bayrisches Landesamt fuer Umwelt](https://www.lfu.bayern.de/index.htm) (Bavarian Environmental Agency) under the [CC-BY 4.0 license](https://creativecommons.org/licenses/by/4.0/deed.en), which regulates the further use of the data. The Bayrisches Landesamt fuer Umwelt are gratefully acknowledged for the collecting and supplying the data.\n\nThe data are in the file `schorgast_wasserstand_abfluss.csv` in the course folder. The data consists of daily measurements of stage (W) in cm above the local datum and discharge (Q) in $\\mathrm{m^3 s^{-1}}$ from three hydrological stations:\n\n-   on the Schorgast stream at Wirsberg (station 1)\n-   on the Untere Steinach stream at Untersteinach (Station 2)\n-   on the Schorgast stream at Untersteinach downstream of the confluence of the Untere Steinach stream (Station 3).\n\n![Stream network and location of hydrological stations](figs/schorgast-untersteinach2.png){.center width=\"50%\"}\n\nThe headings W1-W3 and Q1-Q3 refer to the stage and discharge in stations 1-3 respectively. The original data have been modified slightly by trimming them to the same period, and missing discharge measurements (Jan - Oct 1982) at station 2 were estimated based on the data at the other two stations.\n\nThe data are available in this form at <https://> or on the course folder. Additional information about the data are contained the file `readme-steinach-schorgast.txt` in the course folder.\n\n## Packages\n\nFirst load the necessary packages for your new R-session.\n\n```{r, packages, eval=TRUE, include=FALSE}\nlibrary(readr)     # modernized functions to read rectangular data like csv\nlibrary(dplyr)     # the most essential tidyverse packages\nlibrary(tidyr)     # contains for example pivot tables\nlibrary(lubridate) # a tidyverse package for dates\nlibrary(ggplot2)   # high level plotting with the grammar of graphics\n```\n\n```{r, packages, eval=TRUE}\n```\n\n# Importing and visualising the data\n\nBefore importing data into R, it is helpful to check your current working directory with `getwd()`, and then open the file in a text editor to check the structure of the data. For instance, which columns are there, how are they formatted (e.g. dates, decimal numbers, characters), how are columns separated, are there any additional lines above the data, do the headings contain special characters that will cause problems in R? It may be easier to fix these manually before importing the file.\n\n![Content of the first few rows of the datafile \"schorgast_wasserstand_abfluss.csv\"](figs/schorgast-csv-header.PNG){.left width=\"40%\"}\n\nIn this case we have a file with one header line, the first column contains a date in format YYYY-MM-DD, and the columns are separated by commas. On my computer, the file is located up one level `../` from my working directory, and from there in the subdirectory `Daten/`. We use `read_csv()` from the `readr` package and assign (`<-`) the data the name `schorgast`.\n\n```{r, import-schorgast, eval=FALSE}\nschorgast <- read_csv(\"data/schorgast_wasserstand_abfluss.csv\")\n```\n\n```{r, import-schorgast, eval=TRUE, include=FALSE, echo=FALSE}\n```\n\nAlternatively, you can import the data using the file menu -\\> Import dataset -\\> from text (readr)\n\n![Import data manually through the menu](figs/import-screenshot.png)\n\nNext, let's inspect the data to check the column names and data types and subsequently plot the data.\n\n```{r, head-schorgast, eval=TRUE, echo=TRUE}\nhead(schorgast)\nclass(schorgast$Datum)\n```\n\n```{r, plot-discharge, eval=TRUE}\nplot(Q1 ~ Datum, data = schorgast, type = \"l\")\n```\n\nIf the `Datum` column is not a `Date` class, then you will have trouble plotting the data.\n\n## Exercise 1\n\n-   Plot the stage (W) and discharge (Q) data for stations 1 to 3.\n-   Are there any missing data?\n\n# Checking homogeneity of the data\n\nMany statistical tests and analyses of hydrological data assume that the data are homogeneous. Data are homogeneous when they are consistent and stationary and when there are no gradual or sudden changes. Such changes could be caused by landuse change in the catchment, a change in the measurement method. One fast and easy way to check this is to perform a **double-sum test**, which requires additional hydrological time from a nearby catchment. This test will not expose inhomogeneity that affects both catchments, such as climate change.\n\nThe double sum test involves adding up the daily discharge measurements at two stations for the same period, and plotting the sums against each other. If the plot produces a straight line, the data look homogeneous. A kink in the curve would suggest a sudden change in the dataset, a change in slope would indicate a gradual or systematic change. The R function `cumsum()` calculates the cumulative sum of the measurements (i.e. q1, q1+q2, q1+q2+q3, ...).\n\n```{r, eg-doublesum, eval=TRUE, echo=TRUE}\nx <- 1:10\nx\ncumsum(x)\n```\n\nWe plot the double-sum for stations 1 and 2, using the columns Q1 and Q2. Add some axis labels with `xlab` and `ylab`. Then we run a simple linear regression using the function `lm()` so we can plot a line through the data. We add the line to the plot with the function `abline()`, changing the colour to red (`col = \"red\"`) and line width to double the default (`lwd = 2`).\n\n```{r, plot-cumsums, eval=TRUE}\nsum1 <- cumsum(schorgast$Q1)\nsum2 <- cumsum(schorgast$Q2)\n\nplot(sum2 ~ sum1, xlab=\"Station 1\", ylab=\"Station 2\")\n\nreg1 <- lm(sum2 ~ sum1)\nabline(reg1, col = \"red\", lwd = 2)\n```\n\nThe line initially looks pretty straight because the black points follow the red line very closely. But what if we restrict the regression just to the first part of the series, say the first quarter, which is about 4500 observations?\n\n```{r, plot-cumsums2, eval=TRUE}\nplot(sum2 ~ sum1, xlab=\"Station 1\", ylab=\"Station 2\")\n\nreg2 <- lm(sum2[1:4500] ~ sum1[1:4500])\nabline(reg2, col = \"red\", lwd = 2)\n```\n\nThe line is perhaps not as straight as it initially looked.\n\n## Exercise 2\n\n-   What does the deviation from the line in the plot above mean?\n-   What could have happened in the catchments of stations 1 and 2 that could explain this deviation?\n-   Use double-sum plots to compare the other station, i.e. station 1 and 3, and station 2 and 3. Explain your findings.\n\n# Stage-discharge relationships\n\nHydrological stations don't measure discharge directly, they measure the water level (stage). Stage-discharge relationships are used to calculate the discharge from the water level. Stage-discharge relationships are developed by measuring the discharge at different water levels, and then fitting a curve to the measurements. The stage-discharge relationship depends on the cross-section of the stream bed. If the cross-section changes, then the stage-discharge relationship no longer applies, and it must be recalculated.\n\n## Exercise 3\n\n-   Plot the stage-discharge relationships for the three stations. Typically the stage is plotted on the (vertical) y-axis and the discharge on the x-axis. They should look like this:\n\n```{r, plot-W-Q, eval=TRUE, echo=FALSE}\nplot(W2~Q2, schorgast, main=\"Station 2\",\n     xlab = expression(Abfluss~(m^3~s^-1)),\n     ylab = \"Wasserstand (cm)\")\n```\n\nLooking at the stage-discharge curves, there can be quite some noise. A fixed stage-discharge curve would look like a sharp line, so perhaps different stage-discharge curves were used over the years. The function `ggplot()` in the `ggplot2` package has some functionality that can be helpful to examine this. For instance, it is possible to colour-code the points by time by setting the argument `colour = Datum`. This tells ggplot to colour the points according to the values in the `Datum` column.\n\n```{r, ggplot-W-Q, eval=TRUE, echo=TRUE}\nggplot(data = schorgast) +\n  geom_point(aes(x = Q1, y = W1, colour = Datum)) + \n  theme_light()\n```\n\n-   Create a plot like the one above for station 3. What can you say about how the shape of the stage-discharge curve may have changed over time?\n\n-   How did the channel cross-section change over time to cause this effect?\n\n-   What hydrological processes could have caused these changes?\n\n# Duration curves\n\nDuration curves show (when created from daily flow data) show how often a certain water level or discharge is exceeded within a certain period. For instance, on how many days per year is a flow rate of 1.5 $\\mathrm{m^3 s^{-1}}$ exceeded? They show the exceedance probability of a measured value.\n\nWe do this by sorting the values we are interested in from highest to lowest, and then plotting these values for the period we are interested in.\n\nWe will consider the water level at station 3 (`W3`). First, the function `order()` sorts the data from lowest to highest and returns the corresponding indices, which we call `ind`. Then the function `rev()` reverses this order, which we call `revind`. Finally, we create a new data.frame that is sorted with these indices.\n\n```{r, sort-W2, eval=TRUE}\nind <- order(schorgast$W3)\nrevind <- rev(ind)\nW3_sortiert <- schorgast[revind, ]\n\n# in R, it is also possible to combine these steps\nW3_sortiert <- schorgast[rev(order(schorgast$W3)), ]\n\nhead(W3_sortiert)\n```\n\nNow we are able to plot a duration curve. We will add a column for the probability, called `wahrscheinlichkeit`, which we will calculate from the number of observations (`nzeilen`). Normally you use the dollar sign `$` to access columns in a data.frame (e.g. `schorgast$Datum`). However, you can also use `$` to create columns. R checks whether the column exists, and if it doesn't, R will create it. Since the column `wahrscheinlichkeit` does not already exist, we can create it with `schorgast$wahrscheinlichkeit <- ...`.\n\n```{r, plot-dauerlinie, eval=TRUE}\nnzeilen <- nrow(W3_sortiert)\n\nW3_sortiert$wahrscheinlichkeit <- (1 : nzeilen) / nzeilen\n\nplot(W3~wahrscheinlichkeit, data = W3_sortiert, type = \"l\")\n```\n\nNow you can calculate the probability that a certain water level will be exceeded on one day. Try doing this manually by estimating the probability from the curve. You can use the function `abline()` to add lines to the plot as a guide. For instance `abline(h = 200)` will add a horizontal line at y=200, and `abline(v = c(0.2, 0.4, 0.6))` will add vertical lines at x = 0.2, x = 0.4 and x = 0.6.\n\n## Exercise 4\n\n-   Using the procedure described above, estimate the exceedance probability of a water level of 148 cm at station 3.\n\n-   Which water level at station 3 is exceeded on 10% of days (ie probability of 0.1)?\n\n# Cumulative curves\n\nThe cumulative curve represents the integrated hydrograph (volume) of the flows. It usually starts at zero and ends at a value that is referred to as the flow or water volume of the observed period T. Cumulative curves are important for managing water storage and reservoirs. The slope of the curve is equal to the discharge.\n\n$$\nV_t = \\int_0^t Q\\, dt\n$$\n\nor\n\n$$\nV_T = \\int_0^T Q\\, dt\n$$\n\nHere we will calculate the cumulative distribution for certain years. To make this easier, we will first add two new columns to our dataset to display the year of the measurement, and the day of the year. The `year()` and `yday()` functions from the `lubridate` package do this.\n\n```{r, add-year, eval=TRUE}\nschorgast$jahr <- year(schorgast$Datum)\nschorgast$jahrtag <- yday(schorgast$Datum)\n\nhead(schorgast)\n```\n\nSince we have daily data, $dt$ = 1 day. This means we can find $V_T$ by simply adding up the measurements using `cumsum()`.\n\n```{r, calc-cumsum-year, eval=TRUE}\nschorgast <- schorgast |>\n  group_by(jahr) |>\n  mutate(summeQ1 = cumsum(Q1))\n\nhead(schorgast)\n```\n\nHere we used the `dplyr` package. The `dplyr` package uses the \"pipe\" or `|>` to take the result from one function and pass it directly to the next function. Think of the pipe `|>` as the word \"then\". You can interpret the function like this: take the dataset `schorgast`, then use `group_by()` to create groups that are in the same `jahr`, then use `mutate()` to create a new column called `summeQ1`, which is the cumulative sum (`cumsum()`) of the column `Q1` in each group (`jahr`).\n\nNow we can plot the cumulative curve for any year that we want, here 2009:\n\n```{r, plot-cumsum-year, eval=TRUE}\nplot(summeQ1 ~ Datum, data = schorgast, subset = jahr==2009, type = \"l\")\n```\n\n## Exercise 5\n\n-   plot the cumulative curve for station 2 (Q2) for the year 2006. You will first have to calculate the cumulative sum as shown above for station 1 (Q1).\n\nThe function `ggplot()` offers some useful features for visualising several lines. Here we would like to view several years together for comparison. First, we will convert the column `jahr` to a factor for better plotting. Then we will create a subset of the data for the years 1990 - 2001 so the plots don't get too messy. Next we plot the subset of the data and set `colour = jahr` so that ggplot will plot each year as a separate line. `theme_minimal()` removes the default grey background and some other details.\n\n```{r, plot-all-cumsums, eval=TRUE}\n# change 'jahr' to a factor\nschorgast$jahr <- as.factor(schorgast$jahr)\n\n# create a subset of the data for years 1990 - 2001\nschorgast_sub <- subset(schorgast, jahr %in% 1990:2001)\n\n# plot the data, each year in a different colour\nggplot(data = schorgast_sub) + \n  geom_line(aes(x = jahrtag, y = summeQ1, colour = jahr)) +\n  theme_minimal()\n```\n\nAnother way to make nice plots is to create a separate panel for each year. We do this with the function `facet_wrap()`. We tell `facet_wrap()` to make a new panel for each year (`~ jahr`), and keep the scales constant for each panel (`scales = \"fixed\"`).\n\n```{r, plot-cumsums3, eval=TRUE}\n# plot the data again, this time each year in a panel\nggplot(data = schorgast_sub) + \n  geom_line(aes(x = jahrtag, y = summeQ1)) +\n  facet_wrap(~jahr, scales = \"fixed\") +\n  theme_minimal()\n```\n\n## Exercise 6\n\nLooking at the plots above:\n\n-   which was the wettest year?\n-   which was the driest year?\n-   which year had the wettest autumn? Remember that steep parts of the curve have the highest discharge.\n\n# Estimating discharge at ungauged locations\n\n## Using the catchment areas\n\nHydrological gauging stations rarely exist at the location you need for your construction project. In such cases it is necessary to estimate or adapt the discharge from a different location. For instance, you may have to estimate discharge at point B using the data from station 2, which is the closest station.\n\n![Stream network and location of hydrological stations](figs/schorgast-untersteinach2.png){.center width=\"50%\"}\n\n```{r, maketable2, eval=TRUE}\n#| echo: false\n#| tbl-cap: \"Eigenschaften der Pegelstationen\"\n\nlibrary(readr)\ntabdata <- read.csv(\"data/schorgast-pegelinfo-en.csv\")\nknitr::kable(tabdata)\n```\n\nTo do this, you can scale the measured discharge in proportion to the size of the catchment areas ($A_E$) at each location.\n\n$$\nQ_B = Q_2 \\frac{A_B}{A_2}\n$$\n\nwhere $Q_B$ and $Q_2$ are the discharge at point B and station 2, and $A_B$ and $A_2$ are the areas of the catchments at point B and station 2.\n\nUsing the data in the table above:\n\n```{r, calc-QB, eval=TRUE}\nschorgast$QB <- schorgast$Q2 * 112.1 / 137.4\n\n# plot the result\nplot(QB ~ Datum, schorgast, subset = jahr == 1989, \n     type = \"l\", col = \"red\", main = \"QB - 1989\")\n```\n\n## Exercise 7\n\n-   Using the catchment areas given in the table, estimate the discharge at point A using the measured discharge at station 1. Add this data to the data.frame `schorgast` as a new column called `QA`.\n\n-   You could also use any of the other stations. Which do you think is best?\n\n## Using a regression approach\n\nYou may already have some discharge data at the location you are interested in. In this case you can use the correlation between the discharge at your location of interest and measured discharge at another location with a proper gauging station.\n\nIn this example, we will estimate the discharge at station 3 (Q3) using the discharge at stations 1 (Q1) and 2 (Q2). In fact, we have measured data at station 3, so we would not need to do this in practice, but we will do it anyway to test how good our method is. It makes sense to use both station 1 and 2 because station 3 should be close to the sum of both discharges and this will give us a better estimate.\n\nIn R, it is easy to perform a simple linear regression with the function `lm(y ~ x, data = meinedaten)`. Here `y` is the dependent variable, ie the one we want to estimate, and `x` is the independent variable, ie the one that helps us make the prediction. `y` and `x` are the names of columns in `meinedaten`.\n\nA multiple regression with more than one independent variable, say `x1` and `x2` is very easy in R. It looks like this `lm(y ~ x1 + x2, data = meinedaten)`.\n\nWe can therefore estimate Q3 (dependent variable) from Q1 and Q2 (independent variables) like this:\n\n```{r, reg-Q3, eval=TRUE}\nreg <- lm(Q3 ~ Q1 + Q2, data = schorgast)\n```\n\nWe can view the results with `summary()`.\n\n```{r, summary-reg, eval=TRUE}\nsummary(reg)\n```\n\nThe summary table gives important information about the regression. The coefficients of the regression are in the \"Estimate\" column. The T-statistic is given in the \"t value\" column. It shows that all the coefficients are highly significant with very low p-values. The \"R-squared\" value shows that our regression explains more than 96% of the variance, which is very good.\n\nLet's plot the data for one year (say 1980) to see how good our estimate of Q3 is. We use the `predict()` function to calculate the output of the regression and add it as a column to the dataset `schorgast`.\n\n```{r, plot-reg, eval=TRUE}\nschorgast$Q3_predicted <- predict(reg)\n\n# plot the original data in black\nplot(Q3 ~ Datum, schorgast, subset = jahr == 1980, type = \"l\")\n\n# add the predicted values\nlines(Q3_predicted ~ Datum, schorgast, col = \"red\")\n\n# add a legend\nlegend(\"topright\", c(\"measured\", \"predicted\"), lty=1, col = c(\"black\", \"red\"))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"uebung5_en.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","editor":"visual","title":"Assessing water level and discharge","subtitle":"Hydrologie und Wasserbau - Tutorial 5","author":"Tom Shatwell","date":"26 Nov 2024"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}