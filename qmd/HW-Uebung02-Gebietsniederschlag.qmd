---
title: "Gebietsniederschlag"
format: html
editor: source
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r, options, eval=TRUE, echo = FALSE}
showcommands <- FALSE
```

## EinfÃ¼hrung

In dieser Ãœbung fÃ¼hren wir zunÃ¤chst die EinfÃ¼hrung in R fort.Gehen Sie zuerst durch die online R-EinfÃ¼hrung [Erste Schritte mit R](https://tpetzoldt.github.io/elements-de/tutorials/s1-introductory-r-session.html) von [Thomas Petzoldt](https://tu-dresden.de/bu/umwelt/hydro/hydrobiologie/limnologie/die-professur/beschaeftig/thomas-petzoldt) am [Institut fÃ¼r Hydrobiologie der TU-Dresden](https://tu-dresden.de/bu/umwelt/hydro/hydrobiologie).

In diesem Tutorial bearbeiten Sie zwei grundlegende Arbeitsschritte im Bereich der Niederschlagsanalyse im Rahmen der GewÃ¤sserbewirtschaftung:

1. **Berechnung des Gebietsniederschlags mit Thiessen-Polygonen:**  
   Sie lernen, wie aus punktuellen Niederschlagsmessungen ein gebietsreprÃ¤sentativer Mittelwert ermittelt werden kann. Dabei wenden Sie die Methode der FlÃ¤chengewichtung Ã¼ber Thiessen-Polygone an, um den **Gebietsniederschlag** zu berechnen.

2. **Zeitliche Diskretisierung des Niederschlags:**  
   Sie analysieren Zeitreihendaten einer Messstation und aggregieren diese auf eine gewÃ¼nschte zeitliche AuflÃ¶sung (z.â€¯B. Stunden). So erhalten Sie eine diskretisierte Darstellung des Niederschlagsverlaufs, die fÃ¼r weitere hydrologische Auswertungen genutzt werden kann.


## Aufgabe 1: Gebietsniederschlag

### A) Thiessen-Polygone
Gegeben ist ein Einzugsgebiet mit 7 Niederschlagsmessstationen (A - G). Sie wollen den Abfluss am Gebietsauslass schÃ¤tzen, und benÃ¶tigen den Gebietsniederschlag. Als Methode zur AbschÃ¤tzung des Gebietsniederschlags haben Sie das Thiessen-Polygon-Verfahren gewÃ¤hlt.

![Einzugsgebiet mit Niederschlagsstationen](../figs/EZG-thiessen.PNG){.left width="80%"}


**Zeichnen Sie in der Abbildung die Thiessen-Polygone fÃ¼r die Messstationen A bis G.**

### B) Berechnung des gebietsgewichteten Niederschlags
Sie haben inzwischen die Thiessen-Polygone und deren TeilflÃ¤chen im Einzugsgebiet ermittelt (Tabelle unten). 

| Messstation | TeilflÃ¤che ($km^2$) | Niederschlag (mm) |
|-------------|------------------|--------------------|
| A           | 28               | 6.5                |
| B           | 65               | 3.2                |
| C           | 12               | 5.6                |
| D           | 83               | 3.1                |
| E           | 34               | 7.4                |
| F           | 102              | 2.8                |
| G           | 48               | 9.7                |


Zur Berechnung des gebietsgewichteten Niederschlags $N_G$ innerhalb eines Einzugsgebiets wird das folgende Verfahren angewendet:

ZunÃ¤chst wird der gewichtete Mittelwert des Niederschlags aus den einzelnen TeilflÃ¤chen bestimmt:

$$
N_G = \sum_{i=1}^{n} K_i \cdot N_i
$$

Dabei ist:  
- $N_G$ der gebietsgewichtete Niederschlag (mm)  
- $N_i$ der gemessene Niederschlag an Messstation $i$  
- $K_i$ der FlÃ¤chenanteil der TeilflÃ¤che $i$ bezogen auf das Gesamteinzugsgebiet  
- $n$ die Anzahl der TeilflÃ¤chen bzw. Messstationen  

Der Gewichtungsfaktor $K_i$ wird Ã¼ber das VerhÃ¤ltnis der TeilflÃ¤che $A_i$ zur GesamtflÃ¤che $A_G$ berechnet:

$$
K_i = \frac{A_i}{A_G}
$$

Da die Summe aller TeilflÃ¤chen dem Gesamteinzugsgebiet entspricht, ergibt sich:

$$
\sum_{i=1}^{n} K_i = 1
$$

**Berechnen Sie den Gebietsniederschlag fÃ¼r den in der Tabelle oben beschriebenen Niederschlagsereignis.**

```{r, teilflaechen, eval=TRUE, echo=showcommands}
# Daten eingeben
station <- c("A", "B", "C", "D", "E", "F", "G")
A <- c(28, 65, 12, 83, 34, 102, 48)
N <- c(6.5, 3.2, 5.6, 3.1, 7.4, 2.8, 9.7)

```

```{r, thiessenberechnung, eval=TRUE, echo=showcommands}
# Gewichte ermitteln
Ki <- A / sum(A)

# Gebietsniederschlag
NG <- sum(Ki * N)

# Daten anzeigen
data.frame(station, A, N, Ki)

# Gebietsniederschlag
NG
```


### Aufgabe 2: Diskretisierung des Niederschlags

##### Ziel
In dieser Aufgabe lernen Sie, wie Sie **Niederschlagsdaten zeitlich diskretisieren**, also in gleichmÃ¤ÃŸige Zeitabschnitte (z.â€¯B. Stunden) unterteilen und aggregieren. Ziel ist es, aus den Zeitreihendaten stÃ¼ndliche Niederschlagssummen zu berechnen und diese zu visualisieren.

---

### Schritt 1 â€“ Notwendige R-Pakete laden

ZunÃ¤chst laden Sie die benÃ¶tigten R-Pakete fÃ¼r Datenverarbeitung, Zeitformate und Visualisierung.  

```{r, packages, eval=TRUE, include=FALSE}
library(readr)     # modernized functions to read rectangular data like csv
library(dplyr)     # the most essential tidyverse packages
library(tidyr)     # contains for example pivot tables
library(lubridate) # a tidyverse package for dates
library(ggplot2)   # high level plotting with the grammar of graphics
```

```{r, packages, eval=TRUE}
```

> ðŸ’¡ **Hinweis:** Falls die Pakete noch nicht installiert sind, fÃ¼hren Sie folgenden Befehl aus (nur einmal erforderlich):

```{r eval=FALSE}
install.packages(c("readr", "dplyr", "tidyr", "lubridate", "ggplot2"))
```

---

### Schritt 2 â€“ Arbeitsverzeichnis prÃ¼fen

Bevor Sie Daten einlesen, Ã¼berprÃ¼fen Sie Ihr aktuelles Arbeitsverzeichnis:

```{r}
getwd() # Zeigt das aktuelle Arbeitsverzeichnis an
```

Stellen Sie sicher, dass sich die Datei `Niederschlag_Station_A.csv` im korrekten Pfad befindet.

---

### Schritt 3 â€“ Niederschlagsdaten einlesen

Nun lesen Sie die CSV-Datei mit den Zeitreihendaten der Station A ein:

```{r, dateneinlesen, eval = TRUE, include = FALSE}
niederschlag <- read_csv("../data/Niederschlag_Station_A.csv")
```


```{r, dateneinlesen, eval=TRUE}
```


Werfen Sie anschlieÃŸend einen ersten Blick auf die Daten:

```{r}
head(niederschlag, 15)     # Zeigt die ersten 15 Zeilen
names(niederschlag)        # Spaltennamen anzeigen
```

---

### Schritt 4 â€“ Zeitstempel umwandeln & diskretisieren

Die Spalte `zeit` ist vermutlich im Character-Format. Sie wird jetzt in ein Datums-Zeit-Format (`POSIXct`) umgewandelt:

```{r}
niederschlag$zeit <- as.POSIXct(niederschlag$zeit)
```

Nun erzeugen Sie eine neue Spalte mit gerundeten Zeitstempeln auf Stundenbasis:

```{r}
niederschlag$zeit_diskret <- floor_date(niederschlag$zeit, unit = "hours")
```

Schauen Sie sich an, was passiert ist:

```{r}
head(niederschlag)
tail(niederschlag)
```

---

### Schritt 5 â€“ Aggregation der Niederschlagswerte

Jetzt werden die Niederschlagswerte fÃ¼r jede Stunde summiert:

```{r}
niederschlag_dskr <- aggregate(N_mm ~ zeit_diskret, 
                               data = niederschlag, 
                               FUN = sum)
```

ÃœberprÃ¼fen Sie das Ergebnis:

```{r}
head(niederschlag_dskr, 24)
tail(niederschlag_dskr, 8)
```

---

### Schritt 6 â€“ Visualisierung

#### Variante 1: Einfache Balkengrafik mit `barplot()`

```{r}
barplot(height = niederschlag_dskr$N_mm, 
        names.arg = niederschlag_dskr$zeit_diskret, 
        ylab = "Niederschlag (mm)", 
        main = "Beispielstation")
```

#### Variante 2: Elegante Darstellung mit `ggplot2`

```{r}
ggplot(data = niederschlag_dskr, aes(x = zeit_diskret, y = N_mm)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Station A", x = "Zeit", y = "Niederschlag (mm)") +
  theme_minimal()
```

---

**Nun versuchen Sie den tÃ¤glichen Niederschlag zu ermitteln, mit anderen Worten, Ã¤ndern Sie den Zeitschritt der Diskretisierung von ```"hours"``` in ```"days"``` und plotten Sie die neuen Daten.**

### Fazit

Sie haben gelernt, wie Sie Zeitstempel in R verarbeiten, Daten auf eine gewÃ¼nschte zeitliche AuflÃ¶sung (hier: Stunden) diskretisieren und anschlieÃŸend visualisieren. Diese Methoden bilden eine Grundlage fÃ¼r die weitere hydrologische Analyse.





